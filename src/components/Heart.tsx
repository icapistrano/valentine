/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: omarelone (https://sketchfab.com/omarelone)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/pumping-heart-model-6f815b9822dc479eae0a17b8dcab9c75
Title: PUMPING HEART MODEL
*/

import { GLTF } from "three-stdlib";
import { Group, Vector3 } from "three";
import { useFrame } from "@react-three/fiber";
import { FunctionComponent, useRef, useState } from "react";
import { Outlines, useCursor, useGLTF } from "@react-three/drei";

const path = "/shinyHeart/scene.gltf";

type GLTFResult = GLTF & {
  nodes: {
    ["BASE_HEART_Material_#41_0"]: THREE.Mesh;
  };
  materials: {
    Material_41: THREE.MeshStandardMaterial;
  };
};

export const Heart: FunctionComponent<{
  position: Vector3;
  rotation: [number, number, number];
  onClick: () => void;
}> = ({ position, rotation, onClick }) => {
  const { nodes, materials } = useGLTF(path) as GLTFResult;

  const heartRef = useRef<Group>(null);
  useFrame(({ clock }, delta) => {
    if (!heartRef.current) return;

    heartRef.current.rotation.y =
      Math.sin(clock.elapsedTime - rotation[1]) * 0.2;

    heartRef.current.position.lerp(position, delta);

    if (heartRef.current.scale.x <= 0.005) {
      const scaleFactor = heartRef.current.scale.x + delta * 0.005;
      heartRef.current.scale.set(scaleFactor, scaleFactor, scaleFactor);
    }
  });

  const [onHover, setOnHover] = useState(false);
  useCursor(onHover, "crosshair");

  return (
    <group
      ref={heartRef}
      dispose={null}
      scale={0}
      rotation={rotation}
      onPointerEnter={() => setOnHover(true)}
      onPointerLeave={() => setOnHover(false)}
      onClick={onClick}
    >
      <group name="Sketchfab_Scene" visible={true}>
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group
            name="f6bcb81c5d674405b84df409a29b9a55fbx"
            rotation={[Math.PI / 2, 0, 0]}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="BASE_HEART"
                  position={[-0.676, 38.876, -0.255]}
                  rotation={[-Math.PI / 2, 0, 0]}
                >
                  <group name="Object_5" position={[-0.09, 0, -38.876]}>
                    <mesh
                      name="BASE_HEART_Material_#41_0"
                      castShadow
                      receiveShadow
                      geometry={nodes["BASE_HEART_Material_#41_0"].geometry}
                      material={materials.Material_41}
                    >
                      {onHover && <Outlines thickness={5} color="#50C878" />}
                    </mesh>
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
};

useGLTF.preload(path);
